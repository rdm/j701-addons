DGEQL2 computes a QL factorization of a real m by n matrix A: A = Q *
L.


Arguments
=========

M       (input) INTEGER
        The number of rows of the matrix A.  M >= 0.

N       (input) INTEGER
        The number of columns of the matrix A.  N >= 0.

A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)
        On entry, the m by n matrix A.
        On exit, if m >= n, the lower triangle of the subarray
        A(m-n+1:m,1:n) contains the n by n lower triangular matrix L;
        if m <= n, the elements on and below the (n-m)-th
        superdiagonal contain the m by n lower trapezoidal matrix L;
        the remaining elements, with the array TAU, represent the
        orthogonal matrix Q as a product of elementary reflectors
        (see Further Details).

LDA     (input) INTEGER
        The leading dimension of the array A.  LDA >= max(1,M).

TAU     (output) DOUBLE PRECISION array, dimension (min(M,N))
        The scalar factors of the elementary reflectors (see Further
        Details).

WORK    (workspace) DOUBLE PRECISION array, dimension (N)


INFO    (output) INTEGER
        = 0: successful exit

        < 0: if INFO = -i, the i-th argument had an illegal value


Further Details
===============

The matrix Q is represented as a product of elementary reflectors

   Q = H(k) . . . H(2) H(1), where k = min(m,n).


Each H(i) has the form


   H(i) = I - tau * v * v'


where tau is a real scalar, and v is a real vector with

v(m-k+i+1:m) = 0 and v(m-k+i) = 1; v(1:m-k+i-1) is stored on exit in
A(1:m-k+i-1,n-k+i), and tau in TAU(i).
