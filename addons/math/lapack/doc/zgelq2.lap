ZGELQ2 computes an LQ factorization of a complex m by n matrix A: A =
L * Q.


Arguments
=========

M       (input) INTEGER
        The number of rows of the matrix A.  M >= 0.

N       (input) INTEGER
        The number of columns of the matrix A.  N >= 0.

A       (input/output) COMPLEX*16 array, dimension (LDA,N)
        On entry, the m by n matrix A.
        On exit, the elements on and below the diagonal of the array
        contain the m by min(m,n) lower trapezoidal matrix L (L is
        lower triangular if m <= n); the elements above the diagonal,
        with the array TAU, represent the unitary matrix Q as a
        product of elementary reflectors (see Further Details).

LDA     (input) INTEGER
        The leading dimension of the array A.  LDA >= max(1,M).

TAU     (output) COMPLEX*16 array, dimension (min(M,N))
        The scalar factors of the elementary reflectors (see Further
        Details).

WORK    (workspace) COMPLEX*16 array, dimension (M)


INFO    (output) INTEGER
        = 0: successful exit

        < 0: if INFO = -i, the i-th argument had an illegal value


Further Details
===============

The matrix Q is represented as a product of elementary reflectors

   Q = H(k)' . . . H(2)' H(1)', where k = min(m,n).


Each H(i) has the form


   H(i) = I - tau * v * v'


where tau is a complex scalar, and v is a complex vector with v(1:i-1)
= 0 and v(i) = 1; conjg(v(i+1:n)) is stored on exit in A(i,i+1:n), and
tau in TAU(i).
