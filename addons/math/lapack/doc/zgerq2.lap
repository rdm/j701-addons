ZGERQ2 computes an RQ factorization of a complex m by n matrix A: A =
R * Q.


Arguments
=========

M       (input) INTEGER
        The number of rows of the matrix A.  M >= 0.

N       (input) INTEGER
        The number of columns of the matrix A.  N >= 0.

A       (input/output) COMPLEX*16 array, dimension (LDA,N)
        On entry, the m by n matrix A.
        On exit, if m <= n, the upper triangle of the subarray
        A(1:m,n-m+1:n) contains the m by m upper triangular matrix R;
        if m >= n, the elements on and above the (m-n)-th subdiagonal
        contain the m by n upper trapezoidal matrix R; the remaining
        elements, with the array TAU, represent the unitary matrix
        Q as a product of elementary reflectors (see Further
        Details).

LDA     (input) INTEGER
        The leading dimension of the array A.  LDA >= max(1,M).

TAU     (output) COMPLEX*16 array, dimension (min(M,N))
        The scalar factors of the elementary reflectors (see Further
        Details).

WORK    (workspace) COMPLEX*16 array, dimension (M)


INFO    (output) INTEGER
        = 0: successful exit

        < 0: if INFO = -i, the i-th argument had an illegal value


Further Details
===============

The matrix Q is represented as a product of elementary reflectors

   Q = H(1)' H(2)' . . . H(k)', where k = min(m,n).


Each H(i) has the form


   H(i) = I - tau * v * v'


where tau is a complex scalar, and v is a complex vector with
v(n-k+i+1:n) = 0 and v(n-k+i) = 1; conjg(v(1:n-k+i-1)) is stored on
exit in A(m-k+i,1:n-k+i-1), and tau in TAU(i).
