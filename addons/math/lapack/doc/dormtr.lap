DORMTR overwrites the general real M-by-N matrix C with TRANS = 'T':
   Q**T * C       C * Q**T


where Q is a real orthogonal matrix of order nq, with nq = m if SIDE =
'L' and nq = n if SIDE = 'R'. Q is defined as the product of nq-1
elementary reflectors, as returned by DSYTRD:


if UPLO = 'U', Q = H(nq-1) . . . H(2) H(1);


if UPLO = 'L', Q = H(1) H(2) . . . H(nq-1).


Arguments
=========

SIDE    (input) CHARACTER*1
        = 'L': apply Q or Q**T from the Left;

        = 'R': apply Q or Q**T from the Right.

UPLO    (input) CHARACTER*1

        = 'U': Upper triangle of A contains elementary reflectors
        from DSYTRD;
        = 'L': Lower triangle of A contains elementary reflectors
        from DSYTRD.

TRANS   (input) CHARACTER*1
        = 'N':  No transpose, apply Q;

        = 'T':  Transpose, apply Q**T.

M       (input) INTEGER
        The number of rows of the matrix C. M >= 0.

N       (input) INTEGER
        The number of columns of the matrix C. N >= 0.

A       (input) DOUBLE PRECISION array, dimension
        (LDA,M) if SIDE = 'L'
        (LDA,N) if SIDE = 'R'
        The vectors which define the elementary reflectors, as
        returned by DSYTRD.

LDA     (input) INTEGER
        The leading dimension of the array A.
        LDA >= max(1,M) if SIDE = 'L'; LDA >= max(1,N) if SIDE = 'R'.

TAU     (input) DOUBLE PRECISION array, dimension
        (M-1) if SIDE = 'L'
        (N-1) if SIDE = 'R'
        TAU(i) must contain the scalar factor of the elementary
        reflector H(i), as returned by DSYTRD.

C       (input/output) DOUBLE PRECISION array, dimension (LDC,N)
        On entry, the M-by-N matrix C.
        On exit, C is overwritten by Q*C or Q**T*C or C*Q**T or C*Q.

LDC     (input) INTEGER
        The leading dimension of the array C. LDC >= max(1,M).

WORK    (workspace/output) DOUBLE PRECISION array, dimension (LWORK)
        On exit, if INFO = 0, WORK(1) returns the optimal LWORK.

LWORK   (input) INTEGER
        The dimension of the array WORK.
        If SIDE = 'L', LWORK >= max(1,N);
        if SIDE = 'R', LWORK >= max(1,M).
        For optimum performance LWORK >= N*NB if SIDE = 'L', and
        LWORK >= M*NB if SIDE = 'R', where NB is the optimal
        blocksize.

INFO    (output) INTEGER
        = 0:  successful exit

        < 0:  if INFO = -i, the i-th argument had an illegal value
