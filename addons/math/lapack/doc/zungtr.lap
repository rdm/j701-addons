ZUNGTR generates a complex unitary matrix Q which is defined as the
product of n-1 elementary reflectors of order N, as returned by
ZHETRD:

if UPLO = 'U', Q = H(n-1) . . . H(2) H(1),


if UPLO = 'L', Q = H(1) H(2) . . . H(n-1).


Arguments
=========

UPLO    (input) CHARACTER*1
        = 'U': Upper triangle of A contains elementary reflectors
        from ZHETRD;
        = 'L': Lower triangle of A contains elementary reflectors
        from ZHETRD.

N       (input) INTEGER
        The order of the matrix Q. N >= 0.

A       (input/output) COMPLEX*16 array, dimension (LDA,N)
        On entry, the vectors which define the elementary reflectors,
        as returned by ZHETRD.
        On exit, the N-by-N unitary matrix Q.

LDA     (input) INTEGER
        The leading dimension of the array A. LDA >= N.

TAU     (input) COMPLEX*16 array, dimension (N-1)
        TAU(i) must contain the scalar factor of the elementary
        reflector H(i), as returned by ZHETRD.

WORK    (workspace/output) COMPLEX*16 array, dimension (LWORK)
        On exit, if INFO = 0, WORK(1) returns the optimal LWORK.

LWORK   (input) INTEGER
        The dimension of the array WORK. LWORK >= N-1.
        For optimum performance LWORK >= (N-1)*NB, where NB is
        the optimal blocksize.

INFO    (output) INTEGER
        = 0:  successful exit

        < 0:  if INFO = -i, the i-th argument had an illegal value
