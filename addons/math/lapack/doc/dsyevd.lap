DSYEVD computes all eigenvalues and, optionally, eigenvectors of a
real symmetric matrix A. If eigenvectors are desired, it uses a divide
and conquer algorithm.


The divide and conquer algorithm makes very mild assumptions about
floating point arithmetic. It will work on machines with a guard digit
in add/subtract, or on those binary machines without guard digits
which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or Cray-2. It
could conceivably fail on hexadecimal or decimal machines without
guard digits, but we know of none.


Arguments
=========

JOBZ    (input) CHARACTER*1
        = 'N':  Compute eigenvalues only;

        = 'V':  Compute eigenvalues and eigenvectors.

UPLO    (input) CHARACTER*1

        = 'U':  Upper triangle of A is stored;

        = 'L':  Lower triangle of A is stored.

N       (input) INTEGER
        The order of the matrix A.  N >= 0.

A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)
        On entry, the symmetric matrix A.  If UPLO = 'U', the
        leading N-by-N upper triangular part of A contains the
        upper triangular part of the matrix A.  If UPLO = 'L',
        the leading N-by-N lower triangular part of A contains
        the lower triangular part of the matrix A.
        On exit, if JOBZ = 'V', then if INFO = 0, A contains the
        orthonormal eigenvectors of the matrix A.
        If JOBZ = 'N', then on exit the lower triangle (if UPLO='L')
        or the upper triangle (if UPLO='U') of A, including the
        diagonal, is destroyed.

LDA     (input) INTEGER
        The leading dimension of the array A.  LDA >= max(1,N).

W       (output) DOUBLE PRECISION array, dimension (N)
        If INFO = 0, the eigenvalues in ascending order.

WORK    (workspace/output) DOUBLE PRECISION array,
        dimension (LWORK)
        On exit, if LWORK > 0, WORK(1) returns the optimal LWORK.

LWORK   (input) INTEGER
        The dimension of the array WORK.
        If N <= 1,               LWORK must be at least 1.
        If JOBZ = 'N' and N > 1, LWORK must be at least 2*N+1.
        If JOBZ = 'V' and N > 1, LWORK must be at least
        1 + 5*N + 2*N*lg N + 3*N**2,
        where lg( N ) = smallest integer k such
        that 2**k >= N.

IWORK   (workspace/output) INTEGER array, dimension (LIWORK)
        On exit, if LIWORK > 0, IWORK(1) returns the optimal LIWORK.

LIWORK  (input) INTEGER
        The dimension of the array IWORK.
        If N <= 1,                LIWORK must be at least 1.
        If JOBZ  = 'N' and N > 1, LIWORK must be at least 1.
        If JOBZ  = 'V' and N > 1, LIWORK must be at least 2 + 5*N.

INFO    (output) INTEGER
        = 0:  successful exit

        < 0:  if INFO = -i, the i-th argument had an illegal value

        > 0:  if INFO = i, the algorithm failed to converge; i
        off-diagonal elements of an intermediate tridiagonal
        form did not converge to zero.
