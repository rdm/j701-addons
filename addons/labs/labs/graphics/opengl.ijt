LABTITLE=: 'OpenGL Introduction'
LABFOCUS=: 0

NB. =========================================================
Lab Section Introduction
OpenGL is a 3D graphics API available on Windows and Unix.

Visit www.opengl.org for information and resources.

J uses the API with cd (shared library call) and the J programmer has the same access as a C programmer.
)
PREPARE
clear''		NB. clear base locale
require 'gl2 opengl'
coinsert 'jgtk jgl3'
window=: 0
WINDOWNAME=: 'gl3lab' 
nextijs=: 3 : 0
if. -. '/' e. y do.
y=.jpath '~addons/demos/opengl/lab/',y end.
if. -. '.' e. y do. y=. y,'.ijs' end.
d=.1!:1<y
f=.jpath '~temp/ogl.ijs'
d 1!:2 <f
smopen_jijs_ f
smwrite_jijs_ ,d
smfocus_jijs_ ''
erase 'gl3lab_g_char gl3lab_g_paint'
load f
)

gl3lab=: 3 : 0
NB. close all if more than 1
if. 0~:window do.
 gtk_window_present_with_time window,GDK_CURRENT_TIME
 gtk_widget_grab_focus window
 l=. glgetloc canvas
 realloc__l''      NB. force new rc
 gtk_widget_queue_draw canvas NB. new drawing
else.
 gl3lab_run''
end.
i.0 0
)

testdlls=: 3 : 0
try. 
 current_jzopengl_ 0 
 'OpenGL OK.'
catch.
 'OpenGL not available.'
end.
)

try=: load bind (jpath '~addons/demos/opengl/simple/gldemos.ijs')
gl3lab_jctrl_fkey=: 3 : 0 :: ]
smselout_jijs_ ''
smfocus_jijs_ ''
lab_j_ 0
)
PREPARE

NB. =========================================================
Lab Section
This lab introduces the basic ideas of programming OpenGL.

After you have mastered the basics you may want to make use of various utilities. See the lab "OpenGL Utilities"
)

NB. =========================================================
Lab Section Demo
If you would like to see what can be done with OpenGL, try the OpenGL demo with Studio|Demos|OpenGL...
)

NB. =========================================================
Lab Section J Forms
This lab assumes familiarity with J, forms, canvas control, classes, and objects.
)

NB. =========================================================
Lab Section OpenGL dlls
Opengl is a standard API on Windows and Mac OS X. On Linux it is available, but may not be installed on your system. See www.mesa3d.org for the latest Linux version of OpenGL.
)

NB. =========================================================
Lab Section
This section tests to see if the OpenGL dlls are available.
)
testdlls''

NB. =========================================================
Lab Section
This section opens a temp script that creates a form with an OpenGL control. A triangle is drawn in a random color on a blue background.

If you close the gl3lab form, you can recreate it with gl3lab''.
)
nextijs'ogl_simple'
gl3lab''

NB. =========================================================
Lab Section
Study the script carefully as it shows all the you need to know about doing OpenGL programming in J.

The next sections walk through the script.
)

NB. =========================================================
Lab Section
opengl defines a class that manages an OpenGL render context (drawing context) and provides various utilities.

gl3 defines the OpenGL API calls. The coinsert allows reference to the gl3 names without the _jgl3_ suffix.
)

NB. =========================================================
Lab Section
OpenGL drawing is done on a canvas control with the opengl style.

A canvas with opengl style supports only a few gl2 commands. The key one is glqwh.
)

NB. =========================================================
Lab Section
gl3lab_run creates the form and canvas control with the opengl style.

conew creates a new OpenGL object. This object is used to manage the OpenGL render context.

There is no point in doing the drawing before showing the form as it will just have to be redrawn after the form has been shown.

Lab utility gl3lab calls gl3lab_run if form gl3lab doesn't already exist. If it exists it runs gl3lab_g_paint to repaint the form that is already shown.
)

NB. =========================================================
Lab Section
gl3lab_close destroys the OpenGL object and closes the form.
)

NB. =========================================================
Lab Section
gl3lab_g_paint is called to paint the control. When called the canvas must be the target for gl3 commands.

rc__ogl makes the OpenGL render context current for drawing. If the RC already exists the result is 0 and the g_draw_init call is avoided. If the RC doesn't exist or the size has changed, a new RC is created and the result is 1 so that g_draw_init is run.

g_draw_init contains gl3 commands for a new or resized RC. These commands can be time consuming and avoiding them in repaints improves performance. A major use of this is to create OpenGL calllists.

g_draw creates the drawing.

show__ogl shows the drawing on the screen.
)

NB. =========================================================
Lab Section
Resize the drawing. Each time the triangle is drawn in a new, random color.
)

NB. =========================================================
Lab Section
With the canvas in focus press Ctrl+f.

gl3lab_fctrl_fkey is called by Ctrl+f. It times showing 100 frames and then reports frames per second.

target__ogl selects the OpenGL object canvas as the target for gl3 commands as gl3lab_g_paint requires a target.
)

NB. =========================================================
Lab Section
Sometimes you want the pixels from the drawing. These could perhaps be saved as a bmp file or used for printing.

get_pixels creates an OpenGL object, creates a pixel buffer render context with alloc, draws, destroys the object, and returns the pixels.

alloc__ogl creates a pixel buffer with the given width and height.
)
10 10$get_pixels 10 10

NB. =========================================================
Lab Section
If you have studied and understood the script then you know everything about the mechanics of working with OpenGL in J. Of course there is a great deal to learn about the OpenGL gl3 verbs that can be used in g_draw_init and g_draw.
)

NB. =========================================================
Lab Section Isigraph Control
gl3 verbs are defined in gl3.ijs as cd calls to the OpenGL API.

Verbs are defined for all the API calls. There are several conventions to make the J programming more convenient.

The gl3 verbs are rank 1 and can apply to tables. For example,
  glVertex 3 4$data  NB. 3 API calls of glVertex
)

NB. =========================================================
Lab Section
OpenGL commands are in 4 families:

  gl.... OpenGL commands
  gla... gl helpers
  glu... OpenGL utilities
  glua.. glu helpers

OpenGL gl... verb names always have caps and won't conflict with gl2 names.
)

NB. =========================================================
Lab Section
Some calls have variations that support different numbers and types of arguments. The API has more than 20 glVertex variations. gl3 defines most of these, but does not include short float variations unless that is the only form.

The various forms are marked by suffixes. For example,
glVertex3d and glVertex4d.

In some cases a definition (without modifiers) is added for common cases.
)

NB. =========================================================
Lab Section
Some calls have array arguments and can benefit from smarts in the definition. An array argument is often used with scalar arguments that give data type and count. It is easier (and safer) to have this handled by the definition. The glCallLists prototype is:

glCallLists n i i *

The i's are the count and type (GL_UNSIGNED_BYTE or GL_INT). A wrapper with the same base name, but a prefix of gla is defined to make this easier and safer for the J programmer.

glaCallLists 'abc'      NB. 3;GL_UNSIGNED_BYTE;'abc'
glaCallLists 1000 1002  NB. 2;GL_INT;1000 1002
)

NB. =========================================================
Lab Section Colors
Colors, such as the glClearColor argument, are 4 numbers for the red, green, blue, and alpha components. The range of the numbers is from 0 to 1 and can be floating point.

The glClear argument is the value GL_COLOR_BUFFER_BIT. This value, and many others, are defined in gl3.ijs
)

NB. =========================================================
Lab Section Cube
The next step draws a cube.

In addition a char handler has been added that rotates the cube. Press the x y or z keys to rotate the cube.

Study the script.
)
nextijs'ogl_cube'
gl3lab''

NB. =========================================================
Lab Section Display Lists
Performance is not important with simple drawings, but becomes very important as drawings get more complex.

A key OpenGL feature for performance is the call list.

A call list is a set of commands that have been "compiled" and given a name (an integer).

When the drawing is painted, the call list can be called and the commands execute more efficiently than if they were called directly.
)

NB. =========================================================
Lab Section Cube
The new script creates a calllist for drawing a cube and runs the list twice in two different locations.

glNewList and glEndList bracket the list commands.

Press the x y or z keys to rotate the 2 cubes.
)
nextijs'ogl_cubes'
gl3lab''

NB. =========================================================
Lab Section
This section has an example of using glu verbs (OpenGL utilties API).
)
nextijs'ogl_sphere'
gl3lab''

NB. =========================================================
Lab Section
This example demonstrates using the select buffer to determine which object a mouse click selected.

Use the x y z keys to rotate the cube selected by a mouse click.
)
nextijs'ogl_pickcube'
gl3lab''

NB. =========================================================
Lab Section
OpenGL has only platform dependent and limited support for fonts.

For applications that require more font capabilities than covered in the next few steps, see www.opengl.org for more options.
)

NB. =========================================================
Lab Section
Bitmaps can be used to draw characters and J OpenGL support provides a platform independent way to draw OpenGL text with bitmaps.

glaCreateBitmapFont creates bitmaps for the ASCII character set. Its argument is a wd fontspec and its result has a row for each character with width, height, and bitmap data as 8 bit characters.

The bitmaps are built by drawing text in a temporary form and canvas control, reading the pixels, and converting them to the format required for an OpenGL bitmap.
)

NB. =========================================================
Lab Section
The 3rd row of FONT has the width, height, and bitmap data for the # character.

Data is bits in 8 bit character values. The row width is rounded up to an 8 bit boundary.
)
NB. FONT=: glaCreateBitmapFont__ogl 'arial 16'
NB. 3{FONT
'Fails - glaCreateBitmapFont not yet implemented'

NB. =========================================================
Lab Section
Study the script to see how FONT is created and how glaChars displays text.

glPixelStorei is required so that the bitmap data is corrrectly interpreted.
)
nextijs'ogl_bitmapfont'
'Fails - glaCreateBitmapFont not yet implemented'
gl3lab^:0 ''

NB. =========================================================
Lab Section
Windows provides an OpenGL api call that provides a service similar to the portable method provided by glaCreateBitmapFont.

Study the script and note glaUseFontBitmaps. This call creates calllists that are then used in the later call to glaCallLists.

This is not portable and won't work in Unix.
)
nextijs'ogl_bitmapfont_windows'
'Fails in Unix - not portable.'
gl3lab^:IFWIN ''

NB. =========================================================
Lab Section
Windows also supports outline fonts that have more features and capabilities than bitmap fonts.
)
nextijs'ogl_outlinefont_windows'
'Fails in Unix - not portable.'
gl3lab^:IFWIN ''

NB. =========================================================
Lab Section The End
This lab just scratches the surface of what is possible with OpenGL. But you have also just scratched the surface of what you need to learn to be an effective OpenGL programmer.

Once you understand the basic concepts, you should take lab: OpenGL Utilities.
)
PREPARE
gtk_widget_destroy ::0: window
PREPARE

NB. =========================================================
Lab Section Further Information
You can learn a lot by studying the example scripts and experimenting.

However, eventually you will probably want to get some books on OpenGL.

Perhaps the best book is the "OpenGL Programming Guide" by Jackie Neider, Tom Davis and Mason Woo and the companion "OpenGL Reference Book".

Although most OpenGL books use C, you should still find them valuable in understanding the concepts of 3D graphics and how the OpenGL commands work together.
)

NB. =========================================================
Lab Section Simple Examples
Studio|Demos|OpenGL Lab Demos... helps run a number of scripts from examples\graphics\opengl\simple.

Most of these examples are based closely on examples in "OpenGL Programming Guide".

Many of the examples support interaction with the keyboard or mouse as documented in the help menu of each example.
)

