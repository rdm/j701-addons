LABTITLE=: 'OpenGL Utilities'
LABFOCUS=: 0

NB. =========================================================
Lab Section Introduction
OpenGL is available in the Windows JFE and in the Java JFE under Linux and Mac OS X.

The next section tests to see if the OpenGL dlls are available.
)
PREPARE
clear''
coerase <'plab'
require 'gl2 opengl'
coinsert 'jgtk jgl3'
window_base_=: 0
nextijs=: 3 : 0
if. -. '/' e. y do.
y=.jpath '~addons/demos/opengl/lab/',y end.
if. -. '.' e. y do. y=. y,'.ijs' end.
d=.1!:1<y
f=.jpath '~temp/ogl.ijs'
d 1!:2 <f
smopen_jijs_ f
smwrite_jijs_ ,d
smfocus_jijs_ ''
smsetsaved_jijs_ ''
)
testdlls=: 3 : 0
try. 
 current_jzopengl_ 0 
 'OpenGL OK.'
catch.
 'OpenGL not available.'
end.
)
PREPARE

NB. =========================================================
Lab Section Test dlls
)
testdlls''

NB. =========================================================
Lab Section Getting Started
The basic ideas of the J interface to OpenGL are described in the lab "OpenGL Introduction", which you should have taken first.

This lab introduces some utilities provided, that simplify OpenGL programming.
)

NB. =========================================================
Lab Section
First, load OpenGL. This creates the jzopengl and jzopenglutil classes.

The jzopengl class is the essential class for using OpenGL, and is described in the lab "OpenGL Introduction".

The jzopenglutil class has the utilities.
)
load 'opengl'

NB. =========================================================
Lab Section
The next step opens a script with an OpenGL graphic form.
)

NB. =========================================================
Lab Section
Click on the script to give it focus, then press Ctrl-W to run it.

This draws the graphic. You can leave this graphic window open during the rest of the lab. With each new script, press Ctrl-W to run it.

Move and resize the scripts and graphic window if need be.
)
nextijs 'oglut1.ijs'

NB. =========================================================
Lab Section
Study the script:

* coinsert 'jgtk jzopenglutil'  puts the utilities on the path.

* the code before the NB. === comment line is all standard from the lab "OpenGL Introduction". No utilities are used, and this part is the same throughout this lab.

* the code after the comment line is supported by the utilities, and described in the rest of the lab.
)

NB. =========================================================
Lab Section Utilities
The utilities require that noun ogl is an jzopengl object, i.e.

   ogl=: ''conew'jzopengl'

There should also be a verb 'paint' that does the OpenGL calls. This starts with gsinit'' and ends with gsfini''.

In between these are the graphics definitions, in this case to draw a dodecahedron.

The canvas paint event handler, opengl_g_paint, is defined to be paint.

The character event handler is defined to be gschar, and this gives standard character event handling.

The default event handler is defined to be gsdefault, and this gives standard handlers for the function keys.
)

NB. =========================================================
Lab Section Movement
The graphic will respond to movement keys.

Click on the graphics control to give it focus, then try pressing the movement keys

  i o          move in/out | Shift = move 5 steps in/out

  arrow keys   fly around object
  PageUp,Dn    spin around

  x y z        rotate x y z | Shift = rotate back
  F5 F6 F7     rotate x y z 90 degrees | Shift = rotate back
  Ctrl F5-F7   rotate x y z 180 degrees

  j k l        translate object | Shift = translate back

  F3           snapshot current position
  F4           return to snapshot
)

NB. =========================================================
Lab Section Names
To minimize name conflicts, all utilities in class jzopenglutil have names beginning:

  GS_     nouns, e.g. GS_COLOR
  gs      other definitions, e.g. gsinit

Compare the gl3 script, which has nouns beginning GL_ and other names beginning gl.
)

NB. =========================================================
Lab Section
The next section opens a new script.

As before, click on the script to give it focus, and press Ctrl+W.
)

NB. =========================================================
Lab Section Defaults
This has the following additional code, before the run verb:

  gsetdefaults''
  GS_ROTXYZ=: 45 45 90
  GS_TRNXYZ=: 0 1 0

gsetdefaults sets all values back to defaults.

Nouns GS_TRNXYZ and GS_ROTXYZ are 3-element lists specifing the current translation and rotation. You can set these to draw a graphic in a specific position and orientation.

Try moving the graphic using the movement keys, and then check the values of these nouns.

The updated values are in:

   GS_ROTXYZ_plab_
   GS_TRNXYZ_plab_
)
nextijs 'oglut2.ijs'

NB. =========================================================
Lab Section
The next section opens a new script.
)

NB. =========================================================
Lab Section Lighting
In this script, the call to gsinit is:

   gsinit GS_LIGHT

This initializes the graphic with lighting turned on.
)
nextijs 'oglut3.ijs'

NB. =========================================================
Lab Section
To see the effect of no lighting, in the script, replace:

  gsinit GS_LIGHT

with

  gsinit ''

Then Ctrl-W to run the script.
)

NB. =========================================================
Lab Section
The next section opens a new script.
)

NB. =========================================================
Lab Section Viewbox and Axes
This lab calls two new utilities:

  gsdrawviewbox WHITE
  gsdrawaxes RED

The standard viewing box used is a cube of edge size 2 units. The utilities gsdrawviewbox and gsdrawaxes help you visualize the viewbox.

This viewbox is a guide only, and you can draw outside of the viewbox if you wish.
)
nextijs 'oglut4.ijs'

NB. =========================================================
Lab Section
The next section opens a new script.
)

NB. =========================================================
Lab Section Two Objects
To draw two or more objects, draw one object as usual, then use
OpenGL calls to store the current position on the stack, translate
and rotate to a new position, draw the next object, and pop the stack to complete.

The movement keys will move both objects.

 gsdrawcube ''
 glPushMatrix''
 glTranslate 1.5 _1 0
 glRotate 1 45 0 0
 gsdrawtetrahedron''
 glPopMatrix''
)
nextijs 'oglut5.ijs'

NB. =========================================================
Lab Section
The next section opens a new script.
)

NB. =========================================================
Lab Section 3D Surface
Verb gsdrawsurface2 draws a 3D surface, given a 3D array of x,y,z values, where the last dimension has shape 3.

Verb gsmakexyz creates a 3D array from a boxed list of x, y and z values, and gsfit11 fits them into a box of unit radius.

The "2" suffix in gsdrawsurface2 means light both sides. Try replacing with gsdrawsurface, then use the movement keys to spin the object.
)
nextijs 'oglut6.ijs'

NB. =========================================================
Lab Section End
For more examples, see the demos in Studio|Demos...|opengl.

When running the demos, select Options|View Definition to see the definitions, and experiment with changes to the definitions.
)
